h1. Writing Apache Handlers in Ruby with mod_ruby

This is a step-by-step for writing handlers in Ruby.


h2. mod_ruby Handler Types

Apache provides a number of hooks for customizing each phase of incoming requests, and mod_ruby provides Apache directives for hooking your Ruby code into many of these stages. You can hook mostly everything that the other Apache modules do, resulting in a huge amount of flexibility and control over your server.

This guide will cover each of the directives, explain when it is called, and show several examples of how it can be used.

There are also a few other directives to control the environment of the embedded Ruby; for documentation on those, see "Apache Directives":directives.


h2. Handlers

A handler is just a Ruby object of a certain duck-type that's registered with one or more Apache hooks; each hook expects that the object registered with it provides a particular method. Since Classes are Objects, too, handler methods can be (and often are) class methods. It's also completely acceptable (and useful) to register a single object for more than one hook.

Here are the hooks you can register handlers for with mod_ruby, in the order they're executed, along with the method you'll need to implement for a handler of that type:

!images/handler-order.png(Handler Order Diagram)!

h3. Stacked Handlers

For each hook there can be more than one handler assigned. The hook's behavior varies when there is more then one handler registered to run for the same phase. The following table specifies each handler's behavior in this situation:

||_.Directive||_.Type||
||RubyChildInitHandler         || VOID||
||RubyPostReadRequestHandler   || RUN_ALL||
||RubyTransHandler             || RUN_FIRST||
||RubyInitHandler              || RUN_ALL||
||RubyHeaderParserHandler      || RUN_ALL||
||RubyAccessHandler            || RUN_ALL||
||RubyAuthenHandler            || RUN_FIRST||
||RubyAuthzHandler             || RUN_FIRST||
||RubyTypeHandler              || RUN_FIRST||
||RubyFixupHandler             || RUN_ALL||
||RubyHandler                  || RUN_FIRST||
||RubyLogHandler               || RUN_ALL||
||RubyCleanupHandler           || RUN_ALL||


- @VOID@ :=
Handlers of type @VOID@ will be all executed in the order they have been registered and their return values are ignored. =:
- @RUN_FIRST@ :=
@RUN_FIRST@ handlers will be executed in the order they have been registered until a handler returns something other than @Apache::DECLINED@. If the return value is @Apache::OK@ the next phase will start. In all other cases the execution will be aborted. =:
- @RUN_ALL@ :=
Handlers of type @RUN_ALL@ will be executed in the order they have been registered until one of them returns something other than @Apache::OK@ or @Apache::DECLINED@. =:


h3. Handler Return Values

The value a handler returns indicates the disposition of the request after the handler is done with it. The specific values that can be returned depend on which hook the handler is handling.

The only value that can be returned by all handlers is @Apache::OK@, which tells Apache that the handler has successfully finished its execution.

HTTP handlers may also return @Apache::DONE@, which tells the server to stop the normal HTTP request cycle and fast forward to the @RubyLogHandler@, followed by @RubyCleanupHandler@. HTTP handlers may also return any HTTP numeric status code, which will also abort the request cycle and be handled as an error. Therefore you don't want to return @Apache::HTTP_OK@ from your HTTP response handler; returning @Apache::OK@ will cause Apache to set the @200 OK@ status by itself (if the rest of the request cycle also completes normally, of course).


h3. RubyChildInitHandler

bc. def child_init( server_request )

_[ed: only tested in the prefork model; still need to test what happens in the other MPMs]_

The ChildInitHandler is a special handler that's invoked when an Apache child first starts up, once per child, which allows you to do any of the work that needs to be done before requests are able to be served. This is useful, for example, to establish connections to a database, set up any expensive data structures, or to load further dependencies.

Note that the @request@ argument that's given to the handler isn't a full @Apache::Request@, as there's no actual client request present, but it's populated with all of the server-global data.

Here's an example of establishing a database connection for each child which will later be available to the same handler object for all of the requests it handles.

This example requires the @pg@ gem, the Ruby PostgreSQL client library.

<notextile>
<pre>
#!/usr/bin/env ruby -wU
#encoding: utf-8

# child_db_inithandler.rb

require 'pg'
require 'singleton'

class ChildDbInitHandler
    include Singleton

    ### Set up a database connection.
    def child_init( request )
        @conn = PGconn.connect( "host=localhost dbname=test" )
        request.server.log_info "Preconnect done: %p" % [ @conn ]
        return Apache::OK
    end

    ### Handle content, probably using the database connection.
    def handler( request )
        request.content_type = 'text/plain'
        request.puts "Database connection is: %p" % [ @conn ]
        return Apache::OK
    end

end
</pre>
</notextile>

It provides two methods, one for the @RubyChildInitHandler@ and one for the @RubyHandler@. The latter is just so we can see the database connection object later from the browser.

Since it's a @Singleton@, we can just refer to its @#instance@ to register it with the appropriate hooks.

When a new Apache child starts up, it will establish a connection to the database, and log that it's done so. This will happen before any client is handed off to it, ensuring that by the time it's handling a client request, the database connection is already ready and waiting. 

The Apache config for this will look something like:

<notextile>
<pre>
RubyRequire child_db_inithandler
RubyChildInitHandler ChildDbInitHandler.instance

<Location /child_init_preconnect>
	SetHandler ruby-object
	RubyHandler ChildDbInitHandler.instance
</Location>
</pre>
</notextile>

When the server starts up, you'll see log messages like:

<notextile>
<pre>
[Sat Nov 13 13:41:13 2010] [notice] Apache/2.2.15 (Unix) mod_ruby/1.3.0 Ruby/1.8.7(2009-06-12) configured -- resuming normal operations
[Sat Nov 13 13:41:13 2010] [info] Server built: Aug 24 2010 11:47:29
[Sat Nov 13 13:41:14 2010] [info] Preconnect done: #<PGconn:0x1013331d0>
[Sat Nov 13 13:41:14 2010] [info] Preconnect done: #<PGconn:0x1013331d0>
[Sat Nov 13 13:41:14 2010] [info] Preconnect done: #<PGconn:0x1013331d0>
[Sat Nov 13 13:41:14 2010] [info] Preconnect done: #<PGconn:0x1013331d0>
[Sat Nov 13 13:41:14 2010] [info] Preconnect done: #<PGconn:0x1013331d0>
</pre>
</notextile>

h3. RubyPostReadRequestHandler

bc. def post_read_request( request )

The PostReadRequestHandler, as its name indicates, is invoked immediately after the request has been read and its headers parsed.

This handler is usually used to do some task which needs to be done once per request. 

An example of something you can do with a combination of the @PostReadRequestHandler@ and the @LogHandler@ (covered a little later) is to examine the effect on the resource consumption of the Apache child for each request. Resource usage statistics are gathered immediately before the request, and then compared with the amounts after the request is finished, and the results are logged.

The example requires the @rusage@ gem.

<notextile>
<pre>
#!/usr/bin/env ruby -wU
#encoding: utf-8

# rusagelogger.rb

require 'singleton'
require 'rusage'

class RusageLogger
    include Singleton

	### Set up the handler's instance variables.
	def initialize
		@counter = 0
		@initial_usage = nil
	end


	######
	public
	######

    ### Set the initial usage right after the request is read.
    def post_read_request( request )
		# Only count the main request, not subrequests
		if request.main?
			@counter += 1
        	@initial_usage = Process.rusage
		end
        return Apache::DECLINED
    end

    ### Handle content, probably using the database connection.
    def log_transaction( request )
		if @initial_usage
			usage = Process.rusage

			maxrss_delta = usage.maxrss - @initial_usage.maxrss
			utime_delta  = usage.utime  - @initial_usage.utime
			stime_delta  = usage.stime  - @initial_usage.stime

			logmsg = "Usage deltas for child %d (after %d request/s): " %
				[ Process.pid, @counter ]
			logmsg << "rss: %0.1fKb, utime: %0.3f, stime: %0.3f" %
				[ maxrss_delta/1024.0, utime_delta, stime_delta ]

	        request.server.log_info( logmsg )
		end

        return Apache::DECLINED
    end

end
</pre>
</notextile>

You'd add this handler to your application like so:

<notextile>
<pre>
RubyRequire rubygems
RubyRequire rusagelogger
RubyPostReadRequestHandler RusageLogger.instance

<Location />
	...
	RubyLogHandler RusageLogger.instance
</Location>
</pre>
</notextile>

And the output might look something like:

<notextile>
<pre>
[Wed Dec 22 08:46:59 2010] [info] Usage deltas for child 57236 (after 1 request/s): \
	rss: 188.0Kb, utime: 0.001, stime: 0.001
[Wed Dec 22 08:47:27 2010] [info] Usage deltas for child 57238 (after 1 request/s): \
	rss: 168.0Kb, utime: 0.000, stime: 0.000
[Wed Dec 22 08:47:31 2010] [info] Usage deltas for child 57235 (after 2 request/s): \
	rss: 12.0Kb, utime: 0.000, stime: 0.000
[Wed Dec 22 08:47:40 2010] [info] Usage deltas for child 57236 (after 2 request/s): \
	rss: 24.0Kb, utime: 0.000, stime: 0.000
</pre>
</notextile>

Note that you can wrap this around any other Apache functionality, not just other Ruby handlers. 


h3. RubyTransHandler

bc. def translate_uri( request )

The translation phase is used to manipulate a request's URI. In this phase you can rewrite the URI like @mod_alias@ and @mod_rewrite@ do, and register new handlers for the following phases.

This phase is of type RUN_FIRST.

An example of what you can do is to map a fixed URL for downloading the most-current version of an archive without having to maintain a symlink or other similar solution:

<notextile>
<pre>
#!/usr/bin/env ruby -wKU

# releasemapper.rb

require 'pathname'

# A RubyTransHandler example -- maps a URI like '/releases/package-current.tar.gz' 
# into the latest version of 'package' in a release directory. Note that this doesn't
# do version comparison -- it relies on the mtime of the file instead -- but it easily 
# could.
class ReleaseMapper

	### Set up a handler that maps URLs to archives in the given release_dir.
	def initialize( release_dir )
		@release_dir = Pathname( release_dir )
		@release_dir.untaint

		Apache.request.server.log_info "Setting up a translation handler for %s" %
			[ @release_dir ]
	end


	######
	public
	######

	### Translate requests
	def translate_uri( req )
		if req.uri =~ %r{/releases/(\w+)-latest\.gem}
			gemname = $1.untaint
			req.server.log_info "%s: Translating for the %p gem" % [ self.class.name, gemname ]

			# Find the last-updated release with the specified name
			target = Pathname.glob( @release_dir + "#{gemname}-*.gem" ).
				collect( &:untaint ).
				sort_by {|path| path.mtime }.
				last

			# Set the translated path if one was found
			if target
				req.server.log_info "Mapped request for #{req.uri} to #{target}"
				req.filename = target.to_s

				# Indicate that translation has been done
				return Apache::OK
			else
				req.server.log_debug "Not translating: No release corresponded to #{req.uri}."
			end

		end

		# Let other translation handlers run
		return Apache::DECLINED
	end

end
</pre>
</notextile>

Note that unlike previous examples, this handler is a regular object class so it can be re-used for different release directories. Since they stack, you can add several different ones and the first one that finds a release with the specified name will win.

To set it up, your Apache config might look something like:

<notextile>
<pre>
<VirtualHost *:80>
	HostName releases.example.com

	DocumentRoot /var/www
	RubyRequire releasemapper

	# Map /releases/foo-latest.gem to e.g., /var/software/foo-1.2.3.gem
	RubyTransHandler ReleaseMapper.new('/var/software')

	# Make sure access to the directory the mapper is mapping to is allowed
	<Directory /var/software>
		Order allow,deny
		Allow from all
	</Directory>

</VirtualHost>
</pre>
</notextile>

In the logs, for a request for @/releases/mod_ruby-latest.gem@ it might look something like:

<notextile>
<pre>
[Tue Jan 04 08:40:17 2011] [info] Setting up a translation handler for /var/software
[Tue Jan 04 08:40:17 2011] [info] ReleaseMapper: Translating for the "mod_ruby" gem
[Tue Jan 04 08:40:17 2011] [info] Mapped request for /releases/mod_ruby-latest.gem to /var/software/mod_ruby-1.3.0.gem
</pre>
</notextile>


h3. RubyHeaderParserHandler

bc. def header_parse( request )


_To be done._

h3. RubyAccessHandler

bc. def check_access( request )


_To be done._

h3. RubyAuthenHandler

bc. def authenticate( request )


_To be done._

h3. RubyAuthzHandler

bc. def authorize( request )


_To be done._

h3. RubyTypeHandler

bc. def find_types( request )


_To be done._

h3. RubyFixupHandler

bc. def fixup( request )


_To be done._

h3. RubyHandler:

bc. def handler( request )


_To be done._

h3. RubyLogHandler

bc. def log_transaction( request )


_To be done._

h3. RubyCleanupHandler

bc. def cleanup( request )


_To be done._

